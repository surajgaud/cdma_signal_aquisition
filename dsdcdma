stage = 10;                          % number of stages
ptap1 = [3,10];                      % position of taps for 1st % GD LFSR: 1+d^3+d^10
ptap2 = [2,3,6,8,9,10];              % position of taps for 2nd % GD LFSR: 1+d^2+d^3+d^6+d^8+d^9+d^10
inidata1 = [1 1 1 1 1 1 1 1 1 1];     % initial value of register for 1st
  
inidata2 = [1 1 1 1 1 1 1 1 1 1];     % initial value of register for 2nd
                                      

m1   = mseq(stage,ptap1,inidata1);
m2   = mseq(stage,ptap2,inidata2);
code = goldseq(m1,m2);
code_g = code*2-1;
          
%********** oversampling increasing the number of chips to 4 **************

len=1;
for i=1:1023
    if (code(i)==1)
        for k=len:len+3
        code1(:,k)=1;
        end
    else
        for k=len:len+3
        code1(:,k)=-1;
        end
    end
    len=len+4;
end



%************************* Doppler **************************************%


ts=1e-3/1023;
fs_lo = -250;
fs_hi = 250;
step = 25;
n=1:4092;


for fs = fs_lo:step:fs_hi
     I_comp = sin((2*pi*ts*fs*n).*code1);
     Q_comp = cos((2*pi*ts*fs*n).*code1);    
     Y = ((I_comp+Q_comp).*code1);


    siglen = length(Y);
    awgnoise = randn(1,(siglen));
    pwrsig = sqrt(sum(Y.^2))/siglen;
    pwrnoise = sqrt(sum(awgnoise.^2))/siglen;
    scale = (pwrsig/pwrnoise)/200;
    awgn = scale*awgnoise;
    T1 = (Y+awgn);

    T2 = intdump(T1,1023);
    a = real(T2);
    b = imag(T2);
    c = atan(a./b);
    d = radtodeg(c);
    
    plot(d);
%     set(gca,'Xlim',[-120 120]);
    hold on
    
end
% % 
% % break
% 
% break
%%fll%%

double_code = kron(code1,ones(1,2));


% n=1:8184;
% for fs = fs_lo:step:fs_hi
%     
%     I_comp = sin((2*pi*ts*fs*n).*double_code);
%     Q_comp = cos((2*pi*ts*fs*n).*double_code);
%     ST1 = I_comp.*double_code;
%     ST2 = Q_comp.*double_code;
%     T1_1 = ST1(1:4092);
%     T1_2 = ST1(4093:8184);
%     T2_1 = ST2(1:4092);
%     T2_2 = ST2(4093:8184);
%     T3_1 = intdump(T1_1,2046);
%     T3_2 = intdump(T1_2,2046);
%     T4_1 = intdump(T2_1,2046);
%     T4_2 = intdump(T2_2,2046);
%     
%     dot = (T3_1.*T3_2)+(T4_1.*T4_2);
%     cross = (T3_1.*T4_2)-(T3_2.*T4_1);
%  
%    
% 
%     ce = atan2(dot,cross);
%     de = radtodeg(ce);
%    
%     plot(de);
%     hold on
% end


%***************************FLL Loop***************************%

n=1:8184;
for fs = fs_lo:step:fs_hi
    
    I_comp = sin((2*pi*ts*fs*n).*double_code);
    Q_comp = cos((2*pi*ts*fs*n).*double_code);
    DC = double_code;
    I1 = I_comp(1:4092)+DC(1:4092);
    I2 = I_comp(4093:8184)+DC(4093:8184);
    Q1 = Q_comp(1:4092)+DC(1:4092);
    Q2 = Q_comp(4093:8184)+DC(4093:8184);
    IPS1 = intdump(I1,2046);
    IPS2 = intdump(I2,2046);
    QPS1 = intdump(Q1,2046);
    QPS2 = intdump(Q2,2046);
    
    dot = (IPS1.*IPS2)+(QPS1.*QPS2);
    cross = (IPS1.*QPS2)-(IPS1.*QPS1);
    
    
 
   

    pherr = atan2(cross,dot);
    
    siglen = length(pherr);
    awgnoise = randn(1,(siglen));
    pwrsig = sqrt(sum(Y.^2))/siglen;
    pwrnoise = sqrt(sum(awgnoise.^2))/siglen;
    scale = (pwrsig/pwrnoise)/200;
    awgn = scale*awgnoise;
    T1 = (pherr+awgn);
    degre = radtodeg(pherr);
   
    plot(degre);
    hold on
end


break


%*************************Dll***********************%

ts=1e-3/4092;
fs_lo = -250;
fs_hi = 250;
step = 25;
for fs = fs_lo:step:fs_hi

cf(1)=1.023e6; 
remphs=0; 
h=0; 
cs=0;
Ip=0; 
Il=0; 
Ie=0; 
Qe=0; 
Qp=0; 
Ql=0; 
D=0; 
th=0;

pnc = code1;
pn = [pnc(1023) pnc pnc(1)];
dc = double_code;


bl=25;                       %carrier loop parameters
ts=0.001; 
z=0.7;
wn=8*z*bl/(4*z^2+1);
t1=1/(wn^2); t2=2*z/wn;
c1=(2*t2-ts)/2/t1;
c2=ts/t1;                           

blc=2;                       %code loop parameters
z1=0.7;
wnc=8*zeta1*blc/(4*z1^2+1);
t3=1/(wnc^2); t4=2*z1/wnc;
c3=(2*t4-ts)/2/t3;
c4=ts/t3;

sta = double_code(1:8184);
resph=0;


for i=2:500                        %adding the code phase error
 cps=cf(i-1)/fs;
 blksize=4092;
 ecp=-0.5+resph(i-1):cps:(blksize-1)*cps+resph(i-1)-.5;    %%early
 lcp=0.5+resph(i-1):cps:(blksize-1)*cps+resph(i-1)+.5;     %late
 pcp=0+resph(i-1):cps:(blksize-1)*cps+resph(i-1);           %prompt
 resph(i)=pcp(end)+cps-1023;
 eci=ceil(ecp)+1;
 lci=ceil(lcp)+1;
 pci=ceil(pcp)+1;
 ec=pn(eci);
 lc=pn(lci);
 pc=pn(pci);
 dt=([dc,blksize]);   %data input
 t=dt';
 s=t-mean(t); 
 r=s/max(s);

 n=(1:blksize)*1/fs;               %adding carrier phase error
 ang=(2*pi*f(i-1)*n)+remphs;
 remphs=rem(ang(end),2*pi);
 car=sin(ang);
 ort=cos(ang);
 
 I=r(1:4092)'.*car(1:4092);     %multiplying with the carrier
 Q=r(1:4092)'.*ort(1:4092);     %multiplying with the carrier
 
 
 ie=I(1:4092).*ec(1:4092);      %e channel
 qe=Q(1:4092).*ec(1:4092);
 
 ip=I(1:4092).*pc(1:4092);      %p channel
 qp=Q(1:4092).*pc(1:4092);
 
 il=I(1:4092).*lc(1:4092);      %l channel
 ql=Q(1:4092).*lc(1:4092);

 Qp(i)=sum(qp); 
 Ip(i)=sum(ip);
 Ie(i)=sum(ie); 
 Il(i)=sum(il);
 Qe(i)=sum(qe); 
 Ql(i)=sum(ql);
 a=(Qp(i)/Ip(i)); 
 dll=atan(a)/(2*pi);
 plot(dll)
 hold on
end
end
